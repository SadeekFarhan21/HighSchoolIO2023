import streamlit as st
import nltk
from nltk import FreqDist
from nltk.lm import Laplace
import matplotlib.pyplot as plt
import math

nltk.download('punkt')
st.set_option('deprecation.showPyplotGlobalUse', False)

def calculate_burstiness(text):
    # Tokenize the text into words
    words = nltk.word_tokenize(text)

    # Calculate word frequency distribution
    word_frequency = FreqDist(words)

    # Calculate burstiness using Gini coefficient
    n = len(words)
    gini_coefficient = 1 - sum([(word_frequency[word] / n) ** 2 for word in word_frequency]) / (n ** 2)
    burstiness = 2 * gini_coefficient

    return burstiness

def calculate_perplexity(text):
    # Tokenize the text into words
    words = nltk.word_tokenize(text)

    # Create unigram language model
    word_frequency = FreqDist(words)

    # Calculate perplexity for unigrams
    total_log_prob = sum(-math.log2(word_frequency[word] / len(words)) for word in words)
    perplexity = 2**(total_log_prob / len(words))

    return perplexity

def is_bot_generated(burstiness, perplexity):
    # Experiment with different coefficients based on your observations
    weight_burstiness = 0.7
    weight_perplexity = 0.3

    # Calculate a probability score based on burstiness and perplexity
    probability = weight_burstiness * (1 / burstiness) - weight_perplexity * perplexity

    # Normalize the probability to be between 0 and 1
    normalized_probability = max(0, min(1, probability))

    return normalized_probability

def plot_word_frequency_distribution(text):
    # Tokenize the text into words
    words = nltk.word_tokenize(text)

    # Calculate word frequency distribution
    word_frequency = FreqDist(words)

    # Plot word frequency distribution
    plt.bar(word_frequency.keys(), word_frequency.values())
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title('Word Frequency Distribution')
    return plt

def main():
    st.title("Bot Detection System")

    user_input = st.text_area("Enter the text you want to analyze:")

    if st.button("Analyze"):
        # Calculate and display burstiness
        burstiness = calculate_burstiness(user_input)
        st.write(f"Burstiness: {burstiness:.2%}")

        # Calculate and display perplexity
        perplexity = calculate_perplexity(user_input)
        st.write(f"Perplexity: {perplexity:.2f}")

        # Calculate the likelihood that the text is generated by AI
        probability = is_bot_generated(burstiness, perplexity)
        st.write(f"Likelihood that the text is generated by AI: {probability:.2%}")

        # Plot word frequency distribution
        st.pyplot(plot_word_frequency_distribution(user_input))

if __name__ == "__main__":
    main()
